import{G as t,L as e,A as s,B as r,V as i,a,I as n,M as o,D as l,b as h,O as u,F as d,S as c,U as m,c as f,W as p,H as g,N as v,C as w,d as x,e as M,f as T,P as b,g as S,h as C,i as y,j as P,k as _}from"./three-CHXrHHRv.js";const D=Math.sqrt(5),R=(D-1)/4,B=(5-D)/20,U=t=>0|Math.floor(t),z=new Float64Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]);function F(t=Math.random){const e=function(t){const e=512,s=new Uint8Array(e);for(let r=0;r<e/2;r++)s[r]=r;for(let r=0;r<e/2-1;r++){const e=r+~~(t()*(256-r)),i=s[r];s[r]=s[e],s[e]=i}for(let r=256;r<e;r++)s[r]=s[r-256];return s}(t),s=new Float64Array(e).map((t=>z[t%32*4])),r=new Float64Array(e).map((t=>z[t%32*4+1])),i=new Float64Array(e).map((t=>z[t%32*4+2])),a=new Float64Array(e).map((t=>z[t%32*4+3]));return function(t,n,o,l){let h,u,d,c,m;const f=(t+n+o+l)*R,p=U(t+f),g=U(n+f),v=U(o+f),w=U(l+f),x=(p+g+v+w)*B,M=t-(p-x),T=n-(g-x),b=o-(v-x),S=l-(w-x);let C=0,y=0,P=0,_=0;M>T?C++:y++,M>b?C++:P++,M>S?C++:_++,T>b?y++:P++,T>S?y++:_++,b>S?P++:_++;const D=C>=3?1:0,z=y>=3?1:0,F=P>=3?1:0,E=_>=3?1:0,A=C>=2?1:0,L=y>=2?1:0,Q=P>=2?1:0,H=_>=2?1:0,I=C>=1?1:0,V=y>=1?1:0,k=P>=1?1:0,O=_>=1?1:0,W=M-D+B,j=T-z+B,N=b-F+B,K=S-E+B,Y=M-A+2*B,G=T-L+2*B,q=b-Q+2*B,X=S-H+2*B,Z=M-I+3*B,J=T-V+3*B,$=b-k+3*B,tt=S-O+3*B,et=M-1+4*B,st=T-1+4*B,rt=b-1+4*B,it=S-1+4*B,at=255&p,nt=255&g,ot=255&v,lt=255&w;let ht=.6-M*M-T*T-b*b-S*S;if(ht<0)h=0;else{const t=at+e[nt+e[ot+e[lt]]];ht*=ht,h=ht*ht*(s[t]*M+r[t]*T+i[t]*b+a[t]*S)}let ut=.6-W*W-j*j-N*N-K*K;if(ut<0)u=0;else{const t=at+D+e[nt+z+e[ot+F+e[lt+E]]];ut*=ut,u=ut*ut*(s[t]*W+r[t]*j+i[t]*N+a[t]*K)}let dt=.6-Y*Y-G*G-q*q-X*X;if(dt<0)d=0;else{const t=at+A+e[nt+L+e[ot+Q+e[lt+H]]];dt*=dt,d=dt*dt*(s[t]*Y+r[t]*G+i[t]*q+a[t]*X)}let ct=.6-Z*Z-J*J-$*$-tt*tt;if(ct<0)c=0;else{const t=at+I+e[nt+V+e[ot+k+e[lt+O]]];ct*=ct,c=ct*ct*(s[t]*Z+r[t]*J+i[t]*$+a[t]*tt)}let mt=.6-et*et-st*st-rt*rt-it*it;if(mt<0)m=0;else{const t=at+1+e[nt+1+e[ot+1+e[lt+1]]];mt*=mt,m=mt*mt*(s[t]*et+r[t]*st+i[t]*rt+a[t]*it)}return 27*(h+u+d+c+m)}}class E{constructor(){this.noise4D=F(),this.group=new t,this.lines=[],this.particleCount=150,this.segmentCount=100,this.material=new e({color:8035999,transparent:!0,opacity:.3,blending:s}),this.init()}createFlowLine(){const t=[],e=new r,s=new i(100*(Math.random()-.5),100*(Math.random()-.5),100*(Math.random()-.5));t.push(s.clone());for(let r=1;r<this.segmentCount;r++){const e=t[r-1].clone(),s=this.noise4D(.02*e.x,.02*e.y,.02*e.z,.1*r)*Math.PI*2,a=.5*Math.cos(s),n=.5*Math.sin(s),o=.25*(Math.cos(s)+Math.sin(s));t.push(new i(e.x+a,e.y+n,e.z+o))}e.setFromPoints(t);return{line:new a(e,this.material),points:t.map((t=>t.clone()))}}init(){for(let t=0;t<this.particleCount;t++){const t=this.createFlowLine();this.lines.push(t),this.group.add(t.line)}}update(t){this.lines.forEach(((e,s)=>{const r=e.points.map(((e,r)=>{const a=this.noise4D(.02*e.x,.02*e.y,.02*e.z,t+.1*s);return new i(e.x+.1*Math.cos(a*Math.PI*2),e.y+.1*Math.sin(a*Math.PI*2),e.z+.05*(Math.cos(a*Math.PI)+Math.sin(a*Math.PI)))}));e.line.geometry.setFromPoints(r),e.line.geometry.computeBoundingSphere()})),this.group.rotation.x+=1e-4,this.group.rotation.y+=1e-4}}class A{constructor(){this.noise4D=F(),this.spheres=[],this.materials=[],this.baseGeometry=new n(1,3),this.createMaterials(),this.init()}createMaterials(){[5270655,8035999,4217967].forEach((t=>{this.materials.push(new o({color:t,transparent:!0,opacity:.2,shininess:100,specular:8035999,side:l,wireframe:Math.random()>.7}))}))}init(){for(let t=0;t<20;t++){const t=new h(this.baseGeometry,this.materials[Math.floor(Math.random()*this.materials.length)]),e=30+30*Math.random(),s=Math.random()*Math.PI*2,r=Math.random()*Math.PI;t.position.set(e*Math.sin(r)*Math.cos(s),e*Math.sin(r)*Math.sin(s),e*Math.cos(r)),t.scale.setScalar(2*Math.random()+.5),t.userData={originalPosition:t.position.clone(),rotationSpeed:.002*(Math.random()-.5),pulseSpeed:.002*Math.random()+.001,pulseOffset:Math.random()*Math.PI*2},this.spheres.push(t)}}update(t){this.spheres.forEach(((e,s)=>{const r=this.noise4D(.02*e.position.x,.02*e.position.y,.02*e.position.z,t),i=e.userData.originalPosition;e.position.x=i.x+2*Math.cos(t+s)*r,e.position.y=i.y+2*Math.sin(t+s)*r,e.position.z=i.z+2*Math.cos(.5*t+s)*r,e.rotation.x+=e.userData.rotationSpeed,e.rotation.y+=1.2*e.userData.rotationSpeed;const a=.1*Math.sin(t*e.userData.pulseSpeed+e.userData.pulseOffset)+1,n=e.userData.originalScale||1;e.scale.setScalar(n*a),e.material.transparent&&(e.material.opacity=.2+.1*Math.sin(2*t+s))}))}dispose(){this.baseGeometry.dispose(),this.materials.forEach((t=>t.dispose()))}}const L={name:"CopyShader",uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\n\t\t}"};class Q{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){}dispose(){}}const H=new u(-1,1,1,-1,0,1);const I=new class extends r{constructor(){super(),this.setAttribute("position",new d([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new d([0,2,0,0,2,0],2))}};class V{constructor(t){this._mesh=new h(I,t)}dispose(){this._mesh.geometry.dispose()}render(t){t.render(this._mesh,H)}get material(){return this._mesh.material}set material(t){this._mesh.material=t}}class k extends Q{constructor(t,e){super(),this.textureID=void 0!==e?e:"tDiffuse",t instanceof c?(this.uniforms=t.uniforms,this.material=t):t&&(this.uniforms=m.clone(t.uniforms),this.material=new c({name:void 0!==t.name?t.name:"unspecified",defines:Object.assign({},t.defines),uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader})),this.fsQuad=new V(this.material)}render(t,e,s){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=s.texture),this.fsQuad.material=this.material,this.renderToScreen?(t.setRenderTarget(null),this.fsQuad.render(t)):(t.setRenderTarget(e),this.clear&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),this.fsQuad.render(t))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}class O extends Q{constructor(t,e){super(),this.scene=t,this.camera=e,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(t,e,s){const r=t.getContext(),i=t.state;let a,n;i.buffers.color.setMask(!1),i.buffers.depth.setMask(!1),i.buffers.color.setLocked(!0),i.buffers.depth.setLocked(!0),this.inverse?(a=0,n=1):(a=1,n=0),i.buffers.stencil.setTest(!0),i.buffers.stencil.setOp(r.REPLACE,r.REPLACE,r.REPLACE),i.buffers.stencil.setFunc(r.ALWAYS,a,4294967295),i.buffers.stencil.setClear(n),i.buffers.stencil.setLocked(!0),t.setRenderTarget(s),this.clear&&t.clear(),t.render(this.scene,this.camera),t.setRenderTarget(e),this.clear&&t.clear(),t.render(this.scene,this.camera),i.buffers.color.setLocked(!1),i.buffers.depth.setLocked(!1),i.buffers.color.setMask(!0),i.buffers.depth.setMask(!0),i.buffers.stencil.setLocked(!1),i.buffers.stencil.setFunc(r.EQUAL,1,4294967295),i.buffers.stencil.setOp(r.KEEP,r.KEEP,r.KEEP),i.buffers.stencil.setLocked(!0)}}class W extends Q{constructor(){super(),this.needsSwap=!1}render(t){t.state.buffers.stencil.setLocked(!1),t.state.buffers.stencil.setTest(!1)}}class j{constructor(t,e){if(this.renderer=t,this._pixelRatio=t.getPixelRatio(),void 0===e){const s=t.getSize(new f);this._width=s.width,this._height=s.height,(e=new p(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:g})).texture.name="EffectComposer.rt1"}else this._width=e.width,this._height=e.height;this.renderTarget1=e,this.renderTarget2=e.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new k(L),this.copyPass.material.blending=v,this.clock=new w}swapBuffers(){const t=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=t}addPass(t){this.passes.push(t),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(t,e){this.passes.splice(e,0,t),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(t){const e=this.passes.indexOf(t);-1!==e&&this.passes.splice(e,1)}isLastEnabledPass(t){for(let e=t+1;e<this.passes.length;e++)if(this.passes[e].enabled)return!1;return!0}render(t){void 0===t&&(t=this.clock.getDelta());const e=this.renderer.getRenderTarget();let s=!1;for(let r=0,i=this.passes.length;r<i;r++){const e=this.passes[r];if(!1!==e.enabled){if(e.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(r),e.render(this.renderer,this.writeBuffer,this.readBuffer,t,s),e.needsSwap){if(s){const e=this.renderer.getContext(),s=this.renderer.state.buffers.stencil;s.setFunc(e.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,t),s.setFunc(e.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==O&&(e instanceof O?s=!0:e instanceof W&&(s=!1))}}this.renderer.setRenderTarget(e)}reset(t){if(void 0===t){const e=this.renderer.getSize(new f);this._pixelRatio=this.renderer.getPixelRatio(),this._width=e.width,this._height=e.height,(t=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(t,e){this._width=t,this._height=e;const s=this._width*this._pixelRatio,r=this._height*this._pixelRatio;this.renderTarget1.setSize(s,r),this.renderTarget2.setSize(s,r);for(let i=0;i<this.passes.length;i++)this.passes[i].setSize(s,r)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}class N extends Q{constructor(t,e,s=null,r=null,i=null){super(),this.scene=t,this.camera=e,this.overrideMaterial=s,this.clearColor=r,this.clearAlpha=i,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new x}render(t,e,s){const r=t.autoClear;let i,a;t.autoClear=!1,null!==this.overrideMaterial&&(a=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),null!==this.clearColor&&(t.getClearColor(this._oldClearColor),t.setClearColor(this.clearColor)),null!==this.clearAlpha&&(i=t.getClearAlpha(),t.setClearAlpha(this.clearAlpha)),1==this.clearDepth&&t.clearDepth(),t.setRenderTarget(this.renderToScreen?null:s),!0===this.clear&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),t.render(this.scene,this.camera),null!==this.clearColor&&t.setClearColor(this._oldClearColor),null!==this.clearAlpha&&t.setClearAlpha(i),null!==this.overrideMaterial&&(this.scene.overrideMaterial=a),t.autoClear=r}}const K={name:"LuminosityHighPassShader",shaderID:"luminosityHighPass",uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new x(0)},defaultOpacity:{value:0}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}"};class Y extends Q{constructor(t,e,r,a){super(),this.strength=void 0!==e?e:1,this.radius=r,this.threshold=a,this.resolution=void 0!==t?new f(t.x,t.y):new f(256,256),this.clearColor=new x(0,0,0),this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;let n=Math.round(this.resolution.x/2),o=Math.round(this.resolution.y/2);this.renderTargetBright=new p(n,o,{type:g}),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(let s=0;s<this.nMips;s++){const t=new p(n,o,{type:g});t.texture.name="UnrealBloomPass.h"+s,t.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(t);const e=new p(n,o,{type:g});e.texture.name="UnrealBloomPass.v"+s,e.texture.generateMipmaps=!1,this.renderTargetsVertical.push(e),n=Math.round(n/2),o=Math.round(o/2)}const l=K;this.highPassUniforms=m.clone(l.uniforms),this.highPassUniforms.luminosityThreshold.value=a,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new c({uniforms:this.highPassUniforms,vertexShader:l.vertexShader,fragmentShader:l.fragmentShader}),this.separableBlurMaterials=[];const h=[3,5,7,9,11];n=Math.round(this.resolution.x/2),o=Math.round(this.resolution.y/2);for(let s=0;s<this.nMips;s++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(h[s])),this.separableBlurMaterials[s].uniforms.invSize.value=new f(1/n,1/o),n=Math.round(n/2),o=Math.round(o/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=e,this.compositeMaterial.uniforms.bloomRadius.value=.1;this.compositeMaterial.uniforms.bloomFactors.value=[1,.8,.6,.4,.2],this.bloomTintColors=[new i(1,1,1),new i(1,1,1),new i(1,1,1),new i(1,1,1),new i(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;const u=L;this.copyUniforms=m.clone(u.uniforms),this.blendMaterial=new c({uniforms:this.copyUniforms,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:s,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new x,this.oldClearAlpha=1,this.basic=new M,this.fsQuad=new V(null)}dispose(){for(let t=0;t<this.renderTargetsHorizontal.length;t++)this.renderTargetsHorizontal[t].dispose();for(let t=0;t<this.renderTargetsVertical.length;t++)this.renderTargetsVertical[t].dispose();this.renderTargetBright.dispose();for(let t=0;t<this.separableBlurMaterials.length;t++)this.separableBlurMaterials[t].dispose();this.compositeMaterial.dispose(),this.blendMaterial.dispose(),this.basic.dispose(),this.fsQuad.dispose()}setSize(t,e){let s=Math.round(t/2),r=Math.round(e/2);this.renderTargetBright.setSize(s,r);for(let i=0;i<this.nMips;i++)this.renderTargetsHorizontal[i].setSize(s,r),this.renderTargetsVertical[i].setSize(s,r),this.separableBlurMaterials[i].uniforms.invSize.value=new f(1/s,1/r),s=Math.round(s/2),r=Math.round(r/2)}render(t,e,s,r,i){t.getClearColor(this._oldClearColor),this.oldClearAlpha=t.getClearAlpha();const a=t.autoClear;t.autoClear=!1,t.setClearColor(this.clearColor,0),i&&t.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=s.texture,t.setRenderTarget(null),t.clear(),this.fsQuad.render(t)),this.highPassUniforms.tDiffuse.value=s.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,t.setRenderTarget(this.renderTargetBright),t.clear(),this.fsQuad.render(t);let n=this.renderTargetBright;for(let o=0;o<this.nMips;o++)this.fsQuad.material=this.separableBlurMaterials[o],this.separableBlurMaterials[o].uniforms.colorTexture.value=n.texture,this.separableBlurMaterials[o].uniforms.direction.value=Y.BlurDirectionX,t.setRenderTarget(this.renderTargetsHorizontal[o]),t.clear(),this.fsQuad.render(t),this.separableBlurMaterials[o].uniforms.colorTexture.value=this.renderTargetsHorizontal[o].texture,this.separableBlurMaterials[o].uniforms.direction.value=Y.BlurDirectionY,t.setRenderTarget(this.renderTargetsVertical[o]),t.clear(),this.fsQuad.render(t),n=this.renderTargetsVertical[o];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,t.setRenderTarget(this.renderTargetsHorizontal[0]),t.clear(),this.fsQuad.render(t),this.fsQuad.material=this.blendMaterial,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,i&&t.state.buffers.stencil.setTest(!0),this.renderToScreen?(t.setRenderTarget(null),this.fsQuad.render(t)):(t.setRenderTarget(s),this.fsQuad.render(t)),t.setClearColor(this._oldClearColor,this.oldClearAlpha),t.autoClear=a}getSeperableBlurMaterial(t){const e=[];for(let s=0;s<t;s++)e.push(.39894*Math.exp(-.5*s*s/(t*t))/t);return new c({defines:{KERNEL_RADIUS:t},uniforms:{colorTexture:{value:null},invSize:{value:new f(.5,.5)},direction:{value:new f(.5,.5)},gaussianCoefficients:{value:e}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 invSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float gaussianCoefficients[KERNEL_RADIUS];\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat weightSum = gaussianCoefficients[0];\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianCoefficients[i];\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})}getCompositeMaterial(t){return new c({defines:{NUM_MIPS:t},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}"})}}Y.BlurDirectionX=new f(1,0),Y.BlurDirectionY=new f(0,1);class G{constructor(){this.scene=new T,this.camera=new b(75,window.innerWidth/window.innerHeight,.1,1e3),this.renderer=new S({canvas:document.querySelector("#bg"),antialias:!0,alpha:!0}),this.composer=null,this.flowField=new E,this.spheres=new A,this.time=0,this.mouse=new f,this.targetRotation=new f,this.init(),this.setupLights(),this.setupPostProcessing(),this.setupEventListeners()}init(){this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.toneMapping=C,this.renderer.toneMappingExposure=1,this.camera.position.setZ(30),this.camera.position.setY(5),this.scene.fog=new y(0,.01),this.scene.add(this.flowField.group),this.spheres.spheres.forEach((t=>this.scene.add(t)))}setupPostProcessing(){this.composer=new j(this.renderer);const t=new N(this.scene,this.camera);this.composer.addPass(t);const e=new Y(new f(window.innerWidth,window.innerHeight),.5,.4,.85);this.composer.addPass(e)}setupLights(){const t=new P(4210752,.8),e=new _(8035999,2);e.position.set(10,10,10);const s=new _(5270655,1.5);s.position.set(-10,-10,-10),this.scene.add(t,e,s)}setupEventListeners(){window.addEventListener("resize",(()=>{this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight),this.composer.setSize(window.innerWidth,window.innerHeight)})),document.addEventListener("mousemove",(t=>{this.mouse.x=t.clientX/window.innerWidth*2-1,this.mouse.y=-t.clientY/window.innerHeight*2+1,this.targetRotation.x=.1*this.mouse.y,this.targetRotation.y=.1*this.mouse.x}))}animate(){requestAnimationFrame(this.animate.bind(this)),this.time+=.001,this.camera.rotation.x+=.05*(this.targetRotation.x-this.camera.rotation.x),this.camera.rotation.y+=.05*(this.targetRotation.y-this.camera.rotation.y),this.flowField.update(this.time),this.spheres.update(this.time),this.composer.render()}dispose(){this.renderer.dispose(),this.scene.traverse((t=>{t.geometry&&t.geometry.dispose(),t.material&&(Array.isArray(t.material)?t.material.forEach((t=>t.dispose())):t.material.dispose())}))}}export{G as Scene};
