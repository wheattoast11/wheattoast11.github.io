{"version":3,"mappings":"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","names":["m","require$$0","createRoot","hydrateRoot","LoadingState","jsxRuntimeExports","jsx","motion","div","className","initial","opacity","animate","exit","children","jsxs","scale","transition","duration","repeat","Infinity","ease","width","height","viewBox","fill","cx","cy","r","stroke","strokeWidth","map","_","i","span","y","delay","SQRT5","Math","sqrt","F4","G4","fastFloor","x","floor","grad4","Float64Array","createNoise4D","random","perm","tableSize","p","Uint8Array","aux","buildPermutationTable","permGrad4x","v","permGrad4y","permGrad4z","permGrad4w","z","w","n0","n1","n2","n3","n4","s","j","k","l","t","x0","y0","z0","w0","rankx","ranky","rankz","rankw","i1","j1","k1","l1","i2","j2","k2","l2","i3","j3","k3","l3","x1","y1","z1","w1","x2","y2","z2","w2","x3","y3","z3","w3","x4","y4","z4","w4","ii","jj","kk","ll","t0","gi0","t1","gi1","t2","gi2","t3","gi3","t4","gi4","FlowField","constructor","this","noise4D","group","THREE.Group","lines","particleCount","segmentCount","material","THREE.LineBasicMaterial","color","transparent","blending","THREE.AdditiveBlending","init","createFlowLine","points","geometry","THREE.BufferGeometry","startPos","THREE.Vector3","push","clone","prevPoint","angle","PI","dx","cos","dy","sin","dz","setFromPoints","line","THREE.Line","flowLine","add","update","time","forEach","lineIndex","point","noise","computeBoundingSphere","rotation","Spheres","spheres","materials","baseGeometry","THREE.IcosahedronGeometry","createMaterials","THREE.MeshPhongMaterial","shininess","specular","side","THREE.DoubleSide","wireframe","sphere","THREE.Mesh","length","radius","theta","phi","position","set","setScalar","userData","originalPosition","rotationSpeed","pulseSpeed","pulseOffset","originalPos","pulse","baseScale","originalScale","dispose","CopyShader","name","uniforms","tDiffuse","value","vertexShader","fragmentShader","Pass","isPass","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","_camera","OrthographicCamera","_geometry","BufferGeometry","super","setAttribute","Float32BufferAttribute","FullScreenQuad","_mesh","Mesh","renderer","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","defines","Object","assign","fsQuad","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","MaskPass","scene","camera","inverse","context","getContext","state","writeValue","clearValue","buffers","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","_pixelRatio","getPixelRatio","size","getSize","Vector2","_width","_height","WebGLRenderTarget","type","HalfFloatType","renderTarget1","renderTarget2","passes","copyPass","NoBlending","clock","Clock","swapBuffers","tmp","addPass","pass","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","_oldClearColor","Color","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","setClearColor","getClearAlpha","setClearAlpha","LuminosityHighPassShader","shaderID","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","UnrealBloomPass","resolution","strength","threshold","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","bloomTintColors","Vector3","copyShader","copyUniforms","blendMaterial","AdditiveBlending","depthTest","depthWrite","basic","MeshBasicMaterial","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","coefficients","exp","KERNEL_RADIUS","colorTexture","invSize","direction","gaussianCoefficients","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","bloomStrength","bloomFactors","bloomRadius","Scene","container","dimensions","THREE.Scene","THREE.PerspectiveCamera","THREE.WebGLRenderer","antialias","alpha","appendChild","domElement","composer","flowField","mouse","THREE.Vector2","targetRotation","setupLights","setupPostProcessing","setupEventListeners","min","window","devicePixelRatio","innerWidth","innerHeight","toneMapping","THREE.ACESFilmicToneMapping","toneMappingExposure","setZ","setY","fog","THREE.FogExp2","renderPass","bloomPass","ambientLight","THREE.AmbientLight","pointLight","THREE.PointLight","pointLight2","addEventListener","aspect","updateProjectionMatrix","document","event","clientX","clientY","requestAnimationFrame","bind","traverse","object","Array","isArray","Canvas","containerRef","useRef","setDimensions","useState","setScene","useEffect","handleResize","current","clientWidth","clientHeight","removeEventListener","newScene","prev","ref","style","top","left","zIndex","background","overflow","ErrorBoundary","React","Component","props","hasError","errorInfo","log","getDerivedStateFromError","_a","message","stack","_b","includes","_c","_d","componentDidCatch","componentStack","setState","componentDidMount","componentDidUpdate","padding","textAlign","minHeight","display","alignItems","justifyContent","flexDirection","fontFamily","Home","lazy","import","__VITE_PRELOAD__","Manifesto","App","onPerfEntry","performance","mark","Function","__vitePreload","async","getCLS","getFID","getFCP","getLCP","getTTFB","then","Router","Suspense","fallback","Routes","Route","path","element","getElementById","StrictMode"],"ignoreList":[0,2,5,6,7,8,9,10,11,12],"sources":["../../node_modules/react-dom/client.js","../../src/components/LoadingState.jsx","../../node_modules/simplex-noise/dist/esm/simplex-noise.js","../../src/three/FlowField.js","../../src/three/Spheres.js","../../node_modules/three/examples/jsm/shaders/CopyShader.js","../../node_modules/three/examples/jsm/postprocessing/Pass.js","../../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../../node_modules/three/examples/jsm/postprocessing/EffectComposer.js","../../node_modules/three/examples/jsm/postprocessing/RenderPass.js","../../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","../../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","../../src/three/Scene.js","../../src/components/Canvas.jsx","../../src/components/ErrorBoundary.jsx","../../src/utils/reportWebVitals.js","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst LoadingState = () => {\n  return (\n    <motion.div\n      className=\"loading-container\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <div className=\"loading-content\">\n        <motion.div\n          className=\"loading-logo\"\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.5, 1, 0.5]\n          }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        >\n          <svg \n            width=\"50\" \n            height=\"50\" \n            viewBox=\"0 0 50 50\"\n            fill=\"none\"\n          >\n            {/* Add your logo SVG path here */}\n            <circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"currentColor\" strokeWidth=\"2\" />\n          </svg>\n        </motion.div>\n        \n        <motion.div\n          className=\"loading-dots\"\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          {[0, 1, 2].map((_, i) => (\n            <motion.span\n              key={i}\n              className=\"dot\"\n              animate={{\n                y: [\"0%\", \"-50%\", \"0%\"],\n                opacity: [0.5, 1, 0.5]\n              }}\n              transition={{\n                duration: 1,\n                repeat: Infinity,\n                delay: i * 0.2,\n                ease: \"easeInOut\"\n              }}\n            />\n          ))}\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default LoadingState; ","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2024 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n// these __PURE__ comments help uglifyjs with dead code removal\n//\nconst SQRT3 = /*#__PURE__*/ Math.sqrt(3.0);\nconst SQRT5 = /*#__PURE__*/ Math.sqrt(5.0);\nconst F2 = 0.5 * (SQRT3 - 1.0);\nconst G2 = (3.0 - SQRT3) / 6.0;\nconst F3 = 1.0 / 3.0;\nconst G3 = 1.0 / 6.0;\nconst F4 = (SQRT5 - 1.0) / 4.0;\nconst G4 = (5.0 - SQRT5) / 20.0;\n// I'm really not sure why this | 0 (basically a coercion to int)\n// is making this faster but I get ~5 million ops/sec more on the\n// benchmarks across the board or a ~10% speedup.\nconst fastFloor = (x) => Math.floor(x) | 0;\nconst grad2 = /*#__PURE__*/ new Float64Array([1, 1,\n    -1, 1,\n    1, -1,\n    -1, -1,\n    1, 0,\n    -1, 0,\n    1, 0,\n    -1, 0,\n    0, 1,\n    0, -1,\n    0, 1,\n    0, -1]);\n// double seems to be faster than single or int's\n// probably because most operations are in double precision\nconst grad3 = /*#__PURE__*/ new Float64Array([1, 1, 0,\n    -1, 1, 0,\n    1, -1, 0,\n    -1, -1, 0,\n    1, 0, 1,\n    -1, 0, 1,\n    1, 0, -1,\n    -1, 0, -1,\n    0, 1, 1,\n    0, -1, 1,\n    0, 1, -1,\n    0, -1, -1]);\n// double is a bit quicker here as well\nconst grad4 = /*#__PURE__*/ new Float64Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n    0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n    1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n    -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n    1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n    -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n    1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n    -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n/**\n * Creates a 2D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction2D}\n */\nexport function createNoise2D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating this yields a little ~3% performance improvement.\n    const permGrad2x = new Float64Array(perm).map(v => grad2[(v % 12) * 2]);\n    const permGrad2y = new Float64Array(perm).map(v => grad2[(v % 12) * 2 + 1]);\n    return function noise2D(x, y) {\n        // if(!isFinite(x) || !isFinite(y)) return 0;\n        let n0 = 0; // Noise contributions from the three corners\n        let n1 = 0;\n        let n2 = 0;\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y) * F2; // Hairy factor for 2D\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const t = (i + j) * G2;\n        const X0 = i - t; // Unskew the cell origin back to (x,y) space\n        const Y0 = j - t;\n        const x0 = x - X0; // The x,y distances from the cell origin\n        const y0 = y - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        else {\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        const y1 = y0 - j1 + G2;\n        const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n        const y2 = y0 - 1.0 + 2.0 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            const gi0 = ii + perm[jj];\n            const g0x = permGrad2x[gi0];\n            const g0y = permGrad2y[gi0];\n            t0 *= t0;\n            // n0 = t0 * t0 * (grad2[gi0] * x0 + grad2[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n            n0 = t0 * t0 * (g0x * x0 + g0y * y0);\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            const gi1 = ii + i1 + perm[jj + j1];\n            const g1x = permGrad2x[gi1];\n            const g1y = permGrad2y[gi1];\n            t1 *= t1;\n            // n1 = t1 * t1 * (grad2[gi1] * x1 + grad2[gi1 + 1] * y1);\n            n1 = t1 * t1 * (g1x * x1 + g1y * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            const gi2 = ii + 1 + perm[jj + 1];\n            const g2x = permGrad2x[gi2];\n            const g2y = permGrad2y[gi2];\n            t2 *= t2;\n            // n2 = t2 * t2 * (grad2[gi2] * x2 + grad2[gi2 + 1] * y2);\n            n2 = t2 * t2 * (g2x * x2 + g2y * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70.0 * (n0 + n1 + n2);\n    };\n}\n/**\n * Creates a 3D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction3D}\n */\nexport function createNoise3D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating these seems to yield a speedup of over 15%\n    const permGrad3x = new Float64Array(perm).map(v => grad3[(v % 12) * 3]);\n    const permGrad3y = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 1]);\n    const permGrad3z = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 2]);\n    return function noise3D(x, y, z) {\n        let n0, n1, n2, n3; // Noise contributions from the four corners\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const k = fastFloor(z + s);\n        const t = (i + j + k) * G3;\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const x0 = x - X0; // The x,y,z distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n        let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n        if (x0 >= y0) {\n            if (y0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // X Y Z order\n            else if (x0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // X Z Y order\n            else {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // Z X Y order\n        }\n        else { // x0<y0\n            if (y0 < z0) {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Z Y X order\n            else if (x0 < z0) {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Y Z X order\n            else {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // Y X Z order\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n        const y1 = y0 - j1 + G3;\n        const z1 = z0 - k1 + G3;\n        const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n        const y2 = y0 - j2 + 2.0 * G3;\n        const z2 = z0 - k2 + 2.0 * G3;\n        const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n        const y3 = y0 - 1.0 + 3.0 * G3;\n        const z3 = z0 - 1.0 + 3.0 * G3;\n        // Work out the hashed gradient indices of the four simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        // Calculate the contribution from the four corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = ii + perm[jj + perm[kk]];\n            t0 *= t0;\n            n0 = t0 * t0 * (permGrad3x[gi0] * x0 + permGrad3y[gi0] * y0 + permGrad3z[gi0] * z0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1]];\n            t1 *= t1;\n            n1 = t1 * t1 * (permGrad3x[gi1] * x1 + permGrad3y[gi1] * y1 + permGrad3z[gi1] * z1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2]];\n            t2 *= t2;\n            n2 = t2 * t2 * (permGrad3x[gi2] * x2 + permGrad3y[gi2] * y2 + permGrad3z[gi2] * z2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = ii + 1 + perm[jj + 1 + perm[kk + 1]];\n            t3 *= t3;\n            n3 = t3 * t3 * (permGrad3x[gi3] * x3 + permGrad3y[gi3] * y3 + permGrad3z[gi3] * z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to stay just inside [-1,1]\n        return 32.0 * (n0 + n1 + n2 + n3);\n    };\n}\n/**\n * Creates a 4D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction4D}\n */\nexport function createNoise4D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating these leads to a ~10% speedup\n    const permGrad4x = new Float64Array(perm).map(v => grad4[(v % 32) * 4]);\n    const permGrad4y = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 1]);\n    const permGrad4z = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 2]);\n    const permGrad4w = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 3]);\n    return function noise4D(x, y, z, w) {\n        let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n        const s = (x + y + z + w) * F4; // Factor for 4D skewing\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const k = fastFloor(z + s);\n        const l = fastFloor(w + s);\n        const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const W0 = l - t;\n        const x0 = x - X0; // The x,y,z,w distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        const w0 = w - W0;\n        // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n        // To find out which of the 24 possible simplices we're in, we need to\n        // determine the magnitude ordering of x0, y0, z0 and w0.\n        // Six pair-wise comparisons are performed between each possible pair\n        // of the four coordinates, and the results are used to rank the numbers.\n        let rankx = 0;\n        let ranky = 0;\n        let rankz = 0;\n        let rankw = 0;\n        if (x0 > y0)\n            rankx++;\n        else\n            ranky++;\n        if (x0 > z0)\n            rankx++;\n        else\n            rankz++;\n        if (x0 > w0)\n            rankx++;\n        else\n            rankw++;\n        if (y0 > z0)\n            ranky++;\n        else\n            rankz++;\n        if (y0 > w0)\n            ranky++;\n        else\n            rankw++;\n        if (z0 > w0)\n            rankz++;\n        else\n            rankw++;\n        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n        // impossible. Only the 24 indices which have non-zero entries make any sense.\n        // We use a thresholding to set the coordinates in turn from the largest magnitude.\n        // Rank 3 denotes the largest coordinate.\n        // Rank 2 denotes the second largest coordinate.\n        // Rank 1 denotes the second smallest coordinate.\n        // The integer offsets for the second simplex corner\n        const i1 = rankx >= 3 ? 1 : 0;\n        const j1 = ranky >= 3 ? 1 : 0;\n        const k1 = rankz >= 3 ? 1 : 0;\n        const l1 = rankw >= 3 ? 1 : 0;\n        // The integer offsets for the third simplex corner\n        const i2 = rankx >= 2 ? 1 : 0;\n        const j2 = ranky >= 2 ? 1 : 0;\n        const k2 = rankz >= 2 ? 1 : 0;\n        const l2 = rankw >= 2 ? 1 : 0;\n        // The integer offsets for the fourth simplex corner\n        const i3 = rankx >= 1 ? 1 : 0;\n        const j3 = ranky >= 1 ? 1 : 0;\n        const k3 = rankz >= 1 ? 1 : 0;\n        const l3 = rankw >= 1 ? 1 : 0;\n        // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n        const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n        const y1 = y0 - j1 + G4;\n        const z1 = z0 - k1 + G4;\n        const w1 = w0 - l1 + G4;\n        const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n        const y2 = y0 - j2 + 2.0 * G4;\n        const z2 = z0 - k2 + 2.0 * G4;\n        const w2 = w0 - l2 + 2.0 * G4;\n        const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n        const y3 = y0 - j3 + 3.0 * G4;\n        const z3 = z0 - k3 + 3.0 * G4;\n        const w3 = w0 - l3 + 3.0 * G4;\n        const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n        const y4 = y0 - 1.0 + 4.0 * G4;\n        const z4 = z0 - 1.0 + 4.0 * G4;\n        const w4 = w0 - 1.0 + 4.0 * G4;\n        // Work out the hashed gradient indices of the five simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        const ll = l & 255;\n        // Calculate the contribution from the five corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = ii + perm[jj + perm[kk + perm[ll]]];\n            t0 *= t0;\n            n0 = t0 * t0 * (permGrad4x[gi0] * x0 + permGrad4y[gi0] * y0 + permGrad4z[gi0] * z0 + permGrad4w[gi0] * w0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]];\n            t1 *= t1;\n            n1 = t1 * t1 * (permGrad4x[gi1] * x1 + permGrad4y[gi1] * y1 + permGrad4z[gi1] * z1 + permGrad4w[gi1] * w1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]];\n            t2 *= t2;\n            n2 = t2 * t2 * (permGrad4x[gi2] * x2 + permGrad4y[gi2] * y2 + permGrad4z[gi2] * z2 + permGrad4w[gi2] * w2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]];\n            t3 *= t3;\n            n3 = t3 * t3 * (permGrad4x[gi3] * x3 + permGrad4y[gi3] * y3 + permGrad4z[gi3] * z3 + permGrad4w[gi3] * w3);\n        }\n        let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n        if (t4 < 0)\n            n4 = 0.0;\n        else {\n            const gi4 = ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]];\n            t4 *= t4;\n            n4 = t4 * t4 * (permGrad4x[gi4] * x4 + permGrad4y[gi4] * y4 + permGrad4z[gi4] * z4 + permGrad4w[gi4] * w4);\n        }\n        // Sum up and scale the result to cover the range [-1,1]\n        return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    };\n}\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\nexport function buildPermutationTable(random) {\n    const tableSize = 512;\n    const p = new Uint8Array(tableSize);\n    for (let i = 0; i < tableSize / 2; i++) {\n        p[i] = i;\n    }\n    for (let i = 0; i < tableSize / 2 - 1; i++) {\n        const r = i + ~~(random() * (256 - i));\n        const aux = p[i];\n        p[i] = p[r];\n        p[r] = aux;\n    }\n    for (let i = 256; i < tableSize; i++) {\n        p[i] = p[i - 256];\n    }\n    return p;\n}\n//# sourceMappingURL=simplex-noise.js.map","import * as THREE from 'three';\nimport { createNoise4D } from 'simplex-noise';\n\nexport class FlowField {\n  constructor() {\n    this.noise4D = createNoise4D();\n    this.group = new THREE.Group();\n    this.lines = [];\n    this.particleCount = 150;\n    this.segmentCount = 100;\n    \n    this.material = new THREE.LineBasicMaterial({\n      color: 0x7A9E9F,\n      transparent: true,\n      opacity: 0.3,\n      blending: THREE.AdditiveBlending\n    });\n\n    this.init();\n  }\n\n  createFlowLine() {\n    const points = [];\n    const geometry = new THREE.BufferGeometry();\n    \n    // Random starting position\n    const startPos = new THREE.Vector3(\n      (Math.random() - 0.5) * 100,\n      (Math.random() - 0.5) * 100,\n      (Math.random() - 0.5) * 100\n    );\n    \n    points.push(startPos.clone());\n    \n    // Generate flow line points\n    for (let i = 1; i < this.segmentCount; i++) {\n      const prevPoint = points[i - 1].clone();\n      const noise = this.noise4D(\n        prevPoint.x * 0.02,\n        prevPoint.y * 0.02,\n        prevPoint.z * 0.02,\n        i * 0.1\n      );\n      \n      const angle = noise * Math.PI * 2;\n      const dx = Math.cos(angle) * 0.5;\n      const dy = Math.sin(angle) * 0.5;\n      const dz = (Math.cos(angle) + Math.sin(angle)) * 0.25;\n      \n      points.push(new THREE.Vector3(\n        prevPoint.x + dx,\n        prevPoint.y + dy,\n        prevPoint.z + dz\n      ));\n    }\n    \n    geometry.setFromPoints(points);\n    const line = new THREE.Line(geometry, this.material);\n    return { line, points: points.map(p => p.clone()) };\n  }\n\n  init() {\n    for (let i = 0; i < this.particleCount; i++) {\n      const flowLine = this.createFlowLine();\n      this.lines.push(flowLine);\n      this.group.add(flowLine.line);\n    }\n  }\n\n  update(time) {\n    this.lines.forEach((flowLine, lineIndex) => {\n      const points = flowLine.points.map((point, i) => {\n        const noise = this.noise4D(\n          point.x * 0.02,\n          point.y * 0.02,\n          point.z * 0.02,\n          time + lineIndex * 0.1\n        );\n        \n        return new THREE.Vector3(\n          point.x + Math.cos(noise * Math.PI * 2) * 0.1,\n          point.y + Math.sin(noise * Math.PI * 2) * 0.1,\n          point.z + (Math.cos(noise * Math.PI) + Math.sin(noise * Math.PI)) * 0.05\n        );\n      });\n      \n      flowLine.line.geometry.setFromPoints(points);\n      flowLine.line.geometry.computeBoundingSphere();\n    });\n\n    this.group.rotation.x += 0.0001;\n    this.group.rotation.y += 0.0001;\n  }\n}","import * as THREE from 'three';\nimport { createNoise4D } from 'simplex-noise';\n\nexport class Spheres {\n  constructor() {\n    this.noise4D = createNoise4D();\n    this.spheres = [];\n    this.materials = [];\n    this.baseGeometry = new THREE.IcosahedronGeometry(1, 3);\n    \n    // Create multiple materials for variety\n    this.createMaterials();\n    this.init();\n  }\n\n  createMaterials() {\n    const colors = [0x506C7F, 0x7A9E9F, 0x405C6F];\n    colors.forEach(color => {\n      this.materials.push(\n        new THREE.MeshPhongMaterial({\n          color,\n          transparent: true,\n          opacity: 0.2,\n          shininess: 100,\n          specular: 0x7A9E9F,\n          side: THREE.DoubleSide,\n          wireframe: Math.random() > 0.7\n        })\n      );\n    });\n  }\n\n  init() {\n    for (let i = 0; i < 20; i++) {\n      const sphere = new THREE.Mesh(\n        this.baseGeometry,\n        this.materials[Math.floor(Math.random() * this.materials.length)]\n      );\n\n      // Position spheres in a more interesting pattern\n      const radius = 30 + Math.random() * 30;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n\n      sphere.position.set(\n        radius * Math.sin(phi) * Math.cos(theta),\n        radius * Math.sin(phi) * Math.sin(theta),\n        radius * Math.cos(phi)\n      );\n\n      sphere.scale.setScalar(Math.random() * 2 + 0.5);\n      sphere.userData = {\n        originalPosition: sphere.position.clone(),\n        rotationSpeed: (Math.random() - 0.5) * 0.002,\n        pulseSpeed: Math.random() * 0.002 + 0.001,\n        pulseOffset: Math.random() * Math.PI * 2\n      };\n\n      this.spheres.push(sphere);\n    }\n  }\n\n  update(time) {\n    this.spheres.forEach((sphere, i) => {\n      // Smooth floating motion\n      const noise = this.noise4D(\n        sphere.position.x * 0.02,\n        sphere.position.y * 0.02,\n        sphere.position.z * 0.02,\n        time\n      );\n\n      const originalPos = sphere.userData.originalPosition;\n      sphere.position.x = originalPos.x + Math.cos(time + i) * 2 * noise;\n      sphere.position.y = originalPos.y + Math.sin(time + i) * 2 * noise;\n      sphere.position.z = originalPos.z + Math.cos(time * 0.5 + i) * 2 * noise;\n\n      // Rotation\n      sphere.rotation.x += sphere.userData.rotationSpeed;\n      sphere.rotation.y += sphere.userData.rotationSpeed * 1.2;\n\n      // Pulsing scale effect\n      const pulse = Math.sin(time * sphere.userData.pulseSpeed + sphere.userData.pulseOffset) * 0.1 + 1;\n      const baseScale = sphere.userData.originalScale || 1;\n      sphere.scale.setScalar(baseScale * pulse);\n\n      // Update material opacity\n      if (sphere.material.transparent) {\n        sphere.material.opacity = 0.2 + Math.sin(time * 2 + i) * 0.1;\n      }\n    });\n  }\n\n  dispose() {\n    this.baseGeometry.dispose();\n    this.materials.forEach(material => material.dispose());\n  }\n}","/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tname: 'CopyShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\tstate.buffers.color.setMask( true );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tClock,\n\tHalfFloatType,\n\tNoBlending,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\t\tthis.copyPass.material.blending = NoBlending;\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\trenderer.setClearColor( this.clearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth == true ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\tif ( this.clear === true ) {\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// restore\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","import {\n\tColor\n} from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n\n\tname: 'LuminosityHighPassShader',\n\n\tshaderID: 'luminosityHighPass',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tHalfFloatType,\n\tMeshBasicMaterial,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass {\n\n\tconstructor( resolution, strength, radius, threshold ) {\n\n\t\tsuper();\n\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\t\tthis.radius = radius;\n\t\tthis.threshold = threshold;\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t// create color only once here, reuse it later inside the render function\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t// render targets\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizonal = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy, { type: HalfFloatType } );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader\n\t\t} );\n\n\t\t// gaussian blur materials\n\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// composite material\n\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// blend material\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\n\t\tthis.blendMaterial = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.basic = new MeshBasicMaterial();\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t\t//\n\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\n\n\t\t}\n\n\t\tthis.compositeMaterial.dispose();\n\t\tthis.blendMaterial.dispose();\n\t\tthis.basic.dispose();\n\n\t\t//\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'invSize' ].value = new Vector2( 1 / resx, 1 / resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.blendMaterial;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\tgetSeperableBlurMaterial( kernelRadius ) {\n\n\t\tconst coefficients = [];\n\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\n\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\n\n\t\t}\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'invSize': { value: new Vector2( 0.5, 0.5 ) }, // inverse texture size\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'gaussianCoefficients': { value: coefficients } // precomputed Gaussian coefficients\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 invSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float gaussianCoefficients[KERNEL_RADIUS];\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat weightSum = gaussianCoefficients[0];\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv ).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianCoefficients[i];\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset ).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset ).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import * as THREE from 'three';\nimport { FlowField } from './FlowField';\nimport { Spheres } from './Spheres';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\n\nexport class Scene {\n  constructor(container, dimensions) {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, dimensions.width / dimensions.height, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setSize(dimensions.width, dimensions.height);\n    container.appendChild(this.renderer.domElement);\n\n    this.composer = null;\n    this.flowField = new FlowField();\n    this.spheres = new Spheres();\n    this.time = 0;\n    this.mouse = new THREE.Vector2();\n    this.targetRotation = new THREE.Vector2();\n\n    this.init();\n    this.setupLights();\n    this.setupPostProcessing();\n    this.setupEventListeners();\n  }\n\n  init() {\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    this.renderer.toneMappingExposure = 1;\n    \n    this.camera.position.setZ(30);\n    this.camera.position.setY(5);\n\n    this.scene.fog = new THREE.FogExp2(0x000000, 0.01);\n    this.scene.add(this.flowField.group);\n    this.spheres.spheres.forEach(sphere => this.scene.add(sphere));\n  }\n\n  setupPostProcessing() {\n    this.composer = new EffectComposer(this.renderer);\n    const renderPass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(renderPass);\n\n    const bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      0.5,  // strength\n      0.4,  // radius\n      0.85  // threshold\n    );\n    this.composer.addPass(bloomPass);\n  }\n\n  setupLights() {\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.8);\n    const pointLight = new THREE.PointLight(0x7A9E9F, 2.0);\n    pointLight.position.set(10, 10, 10);\n    \n    const pointLight2 = new THREE.PointLight(0x506C7F, 1.5);\n    pointLight2.position.set(-10, -10, -10);\n    \n    this.scene.add(ambientLight, pointLight, pointLight2);\n  }\n\n  setupEventListeners() {\n    window.addEventListener('resize', () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.composer.setSize(window.innerWidth, window.innerHeight);\n    });\n\n    document.addEventListener('mousemove', (event) => {\n      this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      \n      this.targetRotation.x = this.mouse.y * 0.1;\n      this.targetRotation.y = this.mouse.x * 0.1;\n    });\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.time += 0.001;\n\n    // Smooth camera rotation\n    this.camera.rotation.x += (this.targetRotation.x - this.camera.rotation.x) * 0.05;\n    this.camera.rotation.y += (this.targetRotation.y - this.camera.rotation.y) * 0.05;\n\n    // Update components\n    this.flowField.update(this.time);\n    this.spheres.update(this.time);\n\n    // Render with post-processing\n    this.composer.render();\n  }\n\n  dispose() {\n    this.renderer.dispose();\n    this.scene.traverse((object) => {\n      if (object.geometry) object.geometry.dispose();\n      if (object.material) {\n        if (Array.isArray(object.material)) {\n          object.material.forEach(material => material.dispose());\n        } else {\n          object.material.dispose();\n        }\n      }\n    });\n  }\n}","import React, { useEffect, useRef, useState } from 'react';\nimport { Scene } from '../three/Scene';\n\nfunction Canvas() {\n  const containerRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const [scene, setScene] = useState(null);\n\n  // Handle resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (containerRef.current) {\n        setDimensions({\n          width: containerRef.current.clientWidth,\n          height: containerRef.current.clientHeight\n        });\n      }\n    };\n\n    // Initial size\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Initialize scene\n  useEffect(() => {\n    if (!containerRef.current || dimensions.width === 0 || dimensions.height === 0) {\n      return;\n    }\n\n    try {\n      const newScene = new Scene(containerRef.current, dimensions);\n      setScene(prev => {\n        if (prev) {\n          prev.dispose();\n        }\n        return newScene;\n      });\n\n      // Start animation\n      const animate = () => {\n        if (newScene) {\n          newScene.animate();\n        }\n        requestAnimationFrame(animate);\n      };\n      animate();\n\n      return () => {\n        if (newScene) {\n          newScene.dispose();\n        }\n      };\n    } catch (error) {\n      console.error('Error initializing scene:', error);\n    }\n  }, [dimensions]);\n\n  return (\n    <div \n      ref={containerRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n        background: '#000000',\n        overflow: 'hidden'\n      }}\n      aria-hidden=\"true\"\n    />\n  );\n}\n\nexport default Canvas; ","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      hasError: false,\n      error: null,\n      errorInfo: null\n    };\n    console.log('ErrorBoundary constructed');\n  }\n\n  static getDerivedStateFromError(error) {\n    console.log('ErrorBoundary getDerivedStateFromError:', {\n      error,\n      type: error?.constructor?.name,\n      message: error?.message,\n      stack: error?.stack\n    });\n    \n    if (error && \n        !error.message?.includes('Failed to load resource') &&\n        !error.message?.includes('Loading chunk') &&\n        !error.message?.includes('Loading CSS chunk')) {\n      return { hasError: true };\n    }\n    return null;\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log('ErrorBoundary componentDidCatch:', {\n      error,\n      type: error?.constructor?.name,\n      message: error?.message,\n      stack: error?.stack,\n      componentStack: errorInfo?.componentStack\n    });\n    \n    if (error && \n        !error.message?.includes('Failed to load resource') &&\n        !error.message?.includes('Loading chunk') &&\n        !error.message?.includes('Loading CSS chunk')) {\n      this.setState({\n        error: error,\n        errorInfo: errorInfo\n      });\n    }\n  }\n\n  componentDidMount() {\n    console.log('ErrorBoundary mounted');\n  }\n\n  componentDidUpdate() {\n    console.log('ErrorBoundary updated', {\n      hasError: this.state.hasError,\n      error: this.state.error\n    });\n  }\n\n  render() {\n    console.log('ErrorBoundary rendering', {\n      hasError: this.state.hasError\n    });\n\n    if (this.state.hasError) {\n      return (\n        <div style={{ \n          padding: '2rem', \n          textAlign: 'center',\n          minHeight: '100vh',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          background: '#000000',\n          color: 'white',\n          fontFamily: 'system-ui, -apple-system, sans-serif'\n        }}>\n          <div>\n            <h1>Something went wrong</h1>\n            <p>Please refresh the page or try again later.</p>\n            {process.env.NODE_ENV === 'development' && (\n              <pre style={{\n                marginTop: '2rem',\n                textAlign: 'left',\n                fontSize: '0.8rem',\n                color: '#666'\n              }}>\n                {this.state.error && this.state.error.toString()}\n              </pre>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary; ","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals; ","import React, { Suspense, lazy, useEffect } from 'react';\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\nimport LoadingState from './components/LoadingState';\nimport Canvas from './components/Canvas';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport reportWebVitals from './utils/reportWebVitals';\n\n// Lazy load components\nconst Home = lazy(() => import('./pages/Home'));\nconst Manifesto = lazy(() => import('./pages/Manifesto'));\n\nfunction App() {\n  useEffect(() => {\n    if ('performance' in window) {\n      window.performance.mark('app_start');\n    }\n    reportWebVitals(console.log);\n  }, []);\n\n  return (\n    <ErrorBoundary>\n      <Router>\n        <div style={{ position: 'relative', minHeight: '100vh' }}>\n          <Canvas />\n          <Suspense fallback={<LoadingState />}>\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"/manifesto\" element={<Manifesto />} />\n            </Routes>\n          </Suspense>\n        </div>\n      </Router>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport '../style.css';\n\n// Create React root and render App\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); "],"file":"assets/index-Ca5fPnEH.js"}